{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\ntimestamp=$(date '+%Y-%m-%d %H:%M:%S')\niso_timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')\nchanges_file=\"$(pwd)/.claude/claude-code-changes.md\"\nsession_file=\"$(pwd)/.claude/.current_session\"\nlock_file=\"$(pwd)/.claude/.changes_lock\"\n\n# Skip if we're just updating the changes log file itself\nif git status --porcelain 2>/dev/null | grep -E '^.M .claude/claude-code-changes.md$' >/dev/null && \n   ! git status --porcelain 2>/dev/null | grep -v '.claude/claude-code-changes.md' | grep -v '^??' >/dev/null; then\n  exit 0\nfi\n\n# Use file locking to prevent duplicate entries  \nif [[ -f \"$lock_file\" ]] && [[ $(($(date +%s) - $(stat -f %m \"$lock_file\" 2>/dev/null || echo 0))) -lt 2 ]]; then\n  exit 0\nfi\ntouch \"$lock_file\"\n\n# Initialize session tracking\nif [[ ! -f \"$session_file\" ]]; then\n  echo \"$(date '+%Y-%m-%d %H:%M:%S')\" > \"$session_file\"\nfi\n\n# Ensure changes log file exists\nif [[ ! -f \"$changes_file\" ]]; then\n  echo \"# Claude Code File Changes Log\" > \"$changes_file\"\n  echo \"\" >> \"$changes_file\"\n  echo \"This log comprehensively tracks all file modifications made by Claude Code with detailed timestamps and change analysis.\" >> \"$changes_file\"\n  echo \"\" >> \"$changes_file\"\nfi\n\n# Get comprehensive change information\nproject_changes=$(git status --porcelain 2>/dev/null | grep -v '.claude/' | head -15)\nif [[ -n \"$project_changes\" ]]; then\n  # Analyze change types\n  added_files=$(echo \"$project_changes\" | grep '^A' | awk '{print $2}')\n  modified_files=$(echo \"$project_changes\" | grep '^M' | awk '{print $2}')\n  deleted_files=$(echo \"$project_changes\" | grep '^D' | awk '{print $2}')\n  renamed_files=$(echo \"$project_changes\" | grep '^R' | awk '{print $2}')\n  untracked_files=$(echo \"$project_changes\" | grep '^??' | awk '{print $2}')\n  \n  # Get current branch and commit info\n  current_branch=$(git branch --show-current 2>/dev/null || echo 'unknown')\n  latest_commit=$(git log -1 --format='%h - %s' 2>/dev/null || echo 'No commits')\n  \n  # Count total changes\n  total_changes=$(echo \"$project_changes\" | wc -l | tr -d ' ')\n  \n  # Log comprehensive change information\n  {\n    echo \"## üìù Change Event: $timestamp\"\n    echo \"**üïê Timestamps:**\"\n    echo \"- Local: $timestamp\"\n    echo \"- UTC: $iso_timestamp\"\n    echo \"- Session Started: $(cat \"$session_file\" 2>/dev/null || echo 'Unknown')\"\n    echo \"\"\n    echo \"**üìä Change Summary:**\"\n    echo \"- Total files affected: $total_changes\"\n    echo \"- Branch: \\`$current_branch\\`\"\n    echo \"- Latest commit: \\`$latest_commit\\`\"\n    echo \"\"\n    \n    # Detailed file analysis\n    if [[ -n \"$added_files\" ]]; then\n      echo \"**‚ûï Added Files:**\"\n      echo \"$added_files\" | while read -r file; do\n        if [[ -n \"$file\" && -f \"$file\" ]]; then\n          lines=$(wc -l < \"$file\" 2>/dev/null || echo '?')\n          size=$(ls -lh \"$file\" 2>/dev/null | awk '{print $5}' || echo '?')\n          echo \"- \\`$file\\` ($lines lines, $size)\"\n        fi\n      done\n      echo \"\"\n    fi\n    \n    if [[ -n \"$modified_files\" ]]; then\n      echo \"**‚úèÔ∏è Modified Files:**\"\n      echo \"$modified_files\" | while read -r file; do\n        if [[ -n \"$file\" && -f \"$file\" ]]; then\n          lines=$(wc -l < \"$file\" 2>/dev/null || echo '?')\n          size=$(ls -lh \"$file\" 2>/dev/null | awk '{print $5}' || echo '?')\n          insertions=$(git diff --numstat \"$file\" 2>/dev/null | awk '{print $1}' || echo '?')\n          deletions=$(git diff --numstat \"$file\" 2>/dev/null | awk '{print $2}' || echo '?')\n          echo \"- \\`$file\\` ($lines lines, $size) [+$insertions/-$deletions]\"\n        fi\n      done\n      echo \"\"\n    fi\n    \n    if [[ -n \"$deleted_files\" ]]; then\n      echo \"**üóëÔ∏è Deleted Files:**\"\n      echo \"$deleted_files\" | while read -r file; do\n        echo \"- \\`$file\\`\"\n      done\n      echo \"\"\n    fi\n    \n    if [[ -n \"$untracked_files\" ]]; then\n      echo \"**üìÑ New Untracked Files:**\"\n      echo \"$untracked_files\" | while read -r file; do\n        if [[ -n \"$file\" && -f \"$file\" ]]; then\n          lines=$(wc -l < \"$file\" 2>/dev/null || echo '?')\n          size=$(ls -lh \"$file\" 2>/dev/null | awk '{print $5}' || echo '?')\n          echo \"- \\`$file\\` ($lines lines, $size)\"\n        fi\n      done\n      echo \"\"\n    fi\n    \n    echo \"**üìã Git Status:**\"\n    echo \"\\`\\`\\`\"\n    echo \"$project_changes\"\n    echo \"\\`\\`\\`\"\n    echo \"\"\n    \n    # Show detailed diffs for modified files (first 5)\n    echo \"$modified_files\" | head -5 | while read -r file; do\n      if [[ -n \"$file\" && -f \"$file\" ]] && git diff \"$file\" >/dev/null 2>&1; then\n        echo \"**üîç Detailed Changes in \\`$file\\`:**\"\n        echo '```diff'\n        git diff \"$file\" 2>/dev/null | head -30 || echo \"Unable to show diff\"\n        echo '```'\n        echo \"\"\n      fi\n    done\n    \n    # Show file content preview for new files\n    echo \"$added_files$untracked_files\" | head -3 | while read -r file; do\n      if [[ -n \"$file\" && -f \"$file\" ]]; then\n        echo \"**üëÄ Content Preview of \\`$file\\`:**\"\n        echo '```'\n        head -15 \"$file\" 2>/dev/null || echo \"Unable to preview file\"\n        echo '```'\n        echo \"\"\n      fi\n    done\n    \n    echo \"---\"\n    echo \"\"\n  } >> \"$changes_file\"\nfi\n\n# Clean up lock\nrm -f \"$lock_file\" 2>/dev/null || true"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\ncmd=$(echo \"$TOOL_INPUT\" | jq -r '.command // empty' 2>/dev/null)\n\n# Check for extremely dangerous commands\nif echo \"$cmd\" | grep -E \"(sudo|chmod 777|mv.*\\.env|cat.*\\.env|>.*\\.env)\" >/dev/null; then\n  echo '{\"decision\": \"block\", \"reason\": \"Dangerous command detected\"}'\n  exit 2\nfi\n\n# Smart rm checking\nif echo \"$cmd\" | grep -E \"^rm\" >/dev/null; then\n  # Block system destruction patterns\n  if echo \"$cmd\" | grep -E \"rm.*-rf.*(^|\\s)(/\\s*$|/\\*|~|\\$HOME|\\.|\\.\\.|\\.\\*|\\*\\s*$)\" >/dev/null; then\n    echo '{\"decision\": \"block\", \"reason\": \"Dangerous rm command - system/directory destruction\"}'\n    exit 2\n  fi\n  \n  # Block system directories\n  if echo \"$cmd\" | grep -E \"rm.*(/usr|/bin|/etc|/var|/sys|/proc|/boot|/lib|/sbin)\" >/dev/null; then\n    echo '{\"decision\": \"block\", \"reason\": \"Dangerous rm command - system directory\"}'\n    exit 2\n  fi\n  \n  # Block critical project files\n  if echo \"$cmd\" | grep -E \"rm.*(package\\.json|\\.git|\\.env|\\.key|\\.pem|id_rsa|known_hosts)\" >/dev/null; then\n    echo '{\"decision\": \"block\", \"reason\": \"Dangerous rm command - critical file\"}'\n    exit 2\n  fi\n  \n  # Allow safe build/temp directories\n  if echo \"$cmd\" | grep -E \"rm.*-rf.*(node_modules|dist|build|\\.next|coverage|logs|tmp|cache|temp)\" >/dev/null; then\n    exit 0\n  fi\n  \n  # Allow specific files (not -rf)\n  if ! echo \"$cmd\" | grep -E \"rm.*-rf\" >/dev/null; then\n    exit 0\n  fi\n  \n  # Block bare rm -rf (without specific targets)\n  if echo \"$cmd\" | grep -E \"^\\s*rm\\s+-rf\\s*$\" >/dev/null; then\n    echo '{\"decision\": \"block\", \"reason\": \"Dangerous rm command - bare rm -rf\"}'\n    exit 2\n  fi\nfi"
          },
          {
            "type": "command",
            "command": "#!/bin/bash\ncmd=$(echo \"$TOOL_INPUT\" | jq -r '.command // empty' 2>/dev/null)\n\n# Check if command starts with npm and convert to pnpm\nif echo \"$cmd\" | grep -E \"^npm \" >/dev/null; then\n  pnpm_command=$(echo \"$cmd\" | sed 's/^npm /pnpm /')\n  echo \"{\\\"decision\\\": \\\"block\\\", \\\"reason\\\": \\\"Converted npm to pnpm: $pnpm_command\\\"}\"\n  exit 2\nfi"
          }
        ]
      },
      {
        "matcher": "Read|Write|Edit",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\nif echo \"$TOOL_INPUT\" | jq -r '.file_path // .path // .paths[] // empty' 2>/dev/null | grep -E \"\\.(env|key|pem|p12|secret)$|/\\.git/|/\\.ssh/\" > /dev/null; then\n  echo '{\"decision\": \"block\", \"reason\": \"Access to sensitive file blocked\"}'\n  exit 2\nfi"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "say \"Subagent task completed\""
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "#!/bin/bash\n# Extract notification message\nmessage=$(echo \"$tool_input\" | jq -r '.message // \"Claude Code notification\"' 2>/dev/null)\n\n# Use voice to announce the notification\nsay \"Akim! Claude has a notification: $message\""
          }
        ]
      }
    ]
  }
}