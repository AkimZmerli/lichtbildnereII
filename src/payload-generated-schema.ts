/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_gallery_items_type = pgEnum('enum_gallery_items_type', [
  'human',
  'non-human',
  'inverted',
])
export const enum_works_preview_gallery_type = pgEnum('enum_works_preview_gallery_type', [
  'human',
  'non-human',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const hero_image = pgTable(
  'hero_image',
  {
    id: serial('id').primaryKey(),
    desktopImage: integer('desktop_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    mobileImage: integer('mobile_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    altText: varchar('alt_text'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    hero_image_desktop_image_idx: index('hero_image_desktop_image_idx').on(columns.desktopImage),
    hero_image_mobile_image_idx: index('hero_image_mobile_image_idx').on(columns.mobileImage),
    hero_image_updated_at_idx: index('hero_image_updated_at_idx').on(columns.updatedAt),
    hero_image_created_at_idx: index('hero_image_created_at_idx').on(columns.createdAt),
  }),
)

export const gallery_items = pgTable(
  'gallery_items',
  {
    id: serial('id').primaryKey(),
    order: numeric('order'),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    type: enum_gallery_items_type('type').notNull(),
    name: varchar('name'),
    physicalHeight: numeric('physical_height'),
    physicalWidth: numeric('physical_width'),
    material: varchar('material'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gallery_items_image_idx: index('gallery_items_image_idx').on(columns.image),
    gallery_items_updated_at_idx: index('gallery_items_updated_at_idx').on(columns.updatedAt),
    gallery_items_created_at_idx: index('gallery_items_created_at_idx').on(columns.createdAt),
  }),
)

export const slides_images = pgTable(
  'slides_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt').notNull(),
  },
  (columns) => ({
    _orderIdx: index('slides_images_order_idx').on(columns._order),
    _parentIDIdx: index('slides_images_parent_id_idx').on(columns._parentID),
    slides_images_image_idx: index('slides_images_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [slides.id],
      name: 'slides_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const slides = pgTable(
  'slides',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    content: jsonb('content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    slides_updated_at_idx: index('slides_updated_at_idx').on(columns.updatedAt),
    slides_created_at_idx: index('slides_created_at_idx').on(columns.createdAt),
  }),
)

export const works_preview = pgTable(
  'works_preview',
  {
    id: serial('id').primaryKey(),
    galleryType: enum_works_preview_gallery_type('gallery_type').notNull(),
    previewImage: integer('preview_image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    altText: varchar('alt_text'),
    title: varchar('title'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    works_preview_preview_image_idx: index('works_preview_preview_image_idx').on(
      columns.previewImage,
    ),
    works_preview_updated_at_idx: index('works_preview_updated_at_idx').on(columns.updatedAt),
    works_preview_created_at_idx: index('works_preview_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    'hero-imageID': integer('hero_image_id'),
    'gallery-itemsID': integer('gallery_items_id'),
    slidesID: integer('slides_id'),
    'works-previewID': integer('works_preview_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_hero_image_id_idx: index(
      'payload_locked_documents_rels_hero_image_id_idx',
    ).on(columns['hero-imageID']),
    payload_locked_documents_rels_gallery_items_id_idx: index(
      'payload_locked_documents_rels_gallery_items_id_idx',
    ).on(columns['gallery-itemsID']),
    payload_locked_documents_rels_slides_id_idx: index(
      'payload_locked_documents_rels_slides_id_idx',
    ).on(columns.slidesID),
    payload_locked_documents_rels_works_preview_id_idx: index(
      'payload_locked_documents_rels_works_preview_id_idx',
    ).on(columns['works-previewID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    'hero-imageIdFk': foreignKey({
      columns: [columns['hero-imageID']],
      foreignColumns: [hero_image.id],
      name: 'payload_locked_documents_rels_hero_image_fk',
    }).onDelete('cascade'),
    'gallery-itemsIdFk': foreignKey({
      columns: [columns['gallery-itemsID']],
      foreignColumns: [gallery_items.id],
      name: 'payload_locked_documents_rels_gallery_items_fk',
    }).onDelete('cascade'),
    slidesIdFk: foreignKey({
      columns: [columns['slidesID']],
      foreignColumns: [slides.id],
      name: 'payload_locked_documents_rels_slides_fk',
    }).onDelete('cascade'),
    'works-previewIdFk': foreignKey({
      columns: [columns['works-previewID']],
      foreignColumns: [works_preview.id],
      name: 'payload_locked_documents_rels_works_preview_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_hero_image = relations(hero_image, ({ one }) => ({
  desktopImage: one(media, {
    fields: [hero_image.desktopImage],
    references: [media.id],
    relationName: 'desktopImage',
  }),
  mobileImage: one(media, {
    fields: [hero_image.mobileImage],
    references: [media.id],
    relationName: 'mobileImage',
  }),
}))
export const relations_gallery_items = relations(gallery_items, ({ one }) => ({
  image: one(media, {
    fields: [gallery_items.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_slides_images = relations(slides_images, ({ one }) => ({
  _parentID: one(slides, {
    fields: [slides_images._parentID],
    references: [slides.id],
    relationName: 'images',
  }),
  image: one(media, {
    fields: [slides_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_slides = relations(slides, ({ many }) => ({
  images: many(slides_images, {
    relationName: 'images',
  }),
}))
export const relations_works_preview = relations(works_preview, ({ one }) => ({
  previewImage: one(media, {
    fields: [works_preview.previewImage],
    references: [media.id],
    relationName: 'previewImage',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    'hero-imageID': one(hero_image, {
      fields: [payload_locked_documents_rels['hero-imageID']],
      references: [hero_image.id],
      relationName: 'hero-image',
    }),
    'gallery-itemsID': one(gallery_items, {
      fields: [payload_locked_documents_rels['gallery-itemsID']],
      references: [gallery_items.id],
      relationName: 'gallery-items',
    }),
    slidesID: one(slides, {
      fields: [payload_locked_documents_rels.slidesID],
      references: [slides.id],
      relationName: 'slides',
    }),
    'works-previewID': one(works_preview, {
      fields: [payload_locked_documents_rels['works-previewID']],
      references: [works_preview.id],
      relationName: 'works-preview',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_gallery_items_type: typeof enum_gallery_items_type
  enum_works_preview_gallery_type: typeof enum_works_preview_gallery_type
  users: typeof users
  media: typeof media
  hero_image: typeof hero_image
  gallery_items: typeof gallery_items
  slides_images: typeof slides_images
  slides: typeof slides
  works_preview: typeof works_preview
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_hero_image: typeof relations_hero_image
  relations_gallery_items: typeof relations_gallery_items
  relations_slides_images: typeof relations_slides_images
  relations_slides: typeof relations_slides
  relations_works_preview: typeof relations_works_preview
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
